name: Deploy Webhook

on:
  repository_dispatch:
    types: [deploy-event]

env:
  PROJECT_ID: thmanyah-task
  REGION_NAME: europe-west1
  MAX_INSTANCES: 5
  CLUSTER_NAME: thmanyah-cluster
  MANAGED_BY: thmanyah

jobs:
  build:
    if: ${{ github.event.client_payload.skip_build != true }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Prepare Terraform Variables
        run: |
          TF_VARS=$(echo '${{ toJSON(vars) }}' | jq -c 'if . == null then {} else . end | with_entries(.)')
          echo "TF_VAR_dynamic_env_vars=${TF_VARS}" >> $GITHUB_ENV

      - name: Prepare Terraform Secrets
        run: |
          TF_SECRETS=$(echo '${{ toJSON(secrets) }}' | jq -c 'if . == null then {} else . end | with_entries(.)')
          echo "TF_VAR_dynamic_env_secrets=${TF_SECRETS}" >> $GITHUB_ENV

      - name: Setup GCP Authentication & Initialize Terraform
        uses: ./.github/actions/setup-gcp-authentication
        with:
          project-id: ${{ env.PROJECT_ID }}
          region-name: ${{ env.REGION_NAME }}
          gcp-sa-key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_FILE }}
          bucket-name: tf-state-${{ github.event.client_payload.service_name }}

      - name: Define variables
        run: |
          echo "DOCKER_REMOTE_URL=${{ env.REGION_NAME }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.DOCKER_IMAGE_NAME }}/${{ env.DOCKER_IMAGE_NAME }}" >> $GITHUB_ENV

      - name: Build and tag Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_NAME }} .
          docker tag ${{ env.DOCKER_IMAGE_NAME }} ${{ env.DOCKER_REMOTE_URL }}

      - name: Terraform Validate
        id: validate
        run: |
          terraform -chdir=terraform/ validate -no-color

      - name: Terraform apply
        env:
          TF_VAR_docker_image_name: ${{ env.DOCKER_IMAGE_NAME }}
          TF_VAR_project_id: ${{ env.PROJECT_ID }}
          TF_VAR_region_name: ${{ env.REGION_NAME }}
        run: terraform -chdir=terraform/ apply -target=google_artifact_registry_repository.repo -auto-approve

      - name: Push Docker image
        run: |
          docker push ${{ env.DOCKER_REMOTE_URL }}

      - name: Terraform apply after docker push
        env:
          TF_VAR_docker_image_name: ${{ env.DOCKER_IMAGE_NAME }}
          TF_VAR_project_id: ${{ env.PROJECT_ID }}
          TF_VAR_region_name: ${{ env.REGION_NAME }}
        run: |
          MAX_RETRIES=10
          RETRY_COUNT=0

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if terraform -chdir=terraform/ apply -auto-approve; then
              echo "Terraform apply succeeded"
              exit 0
            else
              RETRY_COUNT=$((RETRY_COUNT+1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "Terraform apply failed. Retrying in 10 seconds... (Attempt $RETRY_COUNT of $MAX_RETRIES)"
                sleep 10
              else
                echo "Terraform apply failed after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done

  deploy:
    needs: [build]
    if: ${{ needs.build.result == 'success' || needs.build.result == 'skipped' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set variables
        run: |
          echo "service_name=${{ github.event.client_payload.service_name }}" >> $GITHUB_ENV
          echo "IMAGE=${{ env.DOCKER_REMOTE_URL }}:latest" >> $GITHUB_ENV

      - name: Setup GCP Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_FILE }}

      - name: Setup gcloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install GKE gcloud auth plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin --quiet

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} \
            --region ${{ env.REGION_NAME }} \
            --project ${{ env.PROJECT_ID }}

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Create namespace if needed
        run: |
          kubectl get namespace "$service_name" >/dev/null 2>&1 || \
          kubectl create namespace "$service_name"

          kubectl label namespace "$service_name" managed-by=${{ env.MANAGED_BY }} --overwrite

      - name: Deploy with Helm
        run: |
          helm upgrade --install $service_name ./helm \
            --namespace $service_name \
            --set namespace=$service_name \
            --set image=$IMAGE \
